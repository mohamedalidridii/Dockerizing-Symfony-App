Dockerizing a Symfony App - Step by Step Guide

Step 1: Install Docker & Docker Compose

Ensure Docker and Docker Compose are installed on your system. Check installation using:

$ docker -v

$ docker-compose -v

Step 2: Create Required Files

1. Dockerfile

FROM php:8.2-apache

RUN apt-get update && apt-get install -y libicu-dev libpq-dev unzip git && docker-php-ext-install intl pdo pdo_mysql

RUN a2enmod rewrite

WORKDIR /var/www/html

COPY . .

COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

RUN composer install --no-interaction --no-progress --no-dev

RUN chown -R www-data:www-data /var/www/html/var

EXPOSE 80

CMD ["apache2-foreground"]

2. docker-compose.yml

version: '3.8'

services:

  app:

    build:

      context: .

      dockerfile: Dockerfile

    container_name: symfony_app

    restart: always

    working_dir: /var/www/html

    volumes:

      - .:/var/www/html

    ports:

      - "8080:80"

    depends_on:

      - db



  db:

    image: mysql:8

    container_name: symfony_db

    restart: always

    environment:

      MYSQL_ROOT_PASSWORD: root

      MYSQL_DATABASE: symfony

      MYSQL_USER: symfony

      MYSQL_PASSWORD: symfony

    ports:

      - "3306:3306"

    volumes:

      - db_data:/var/lib/mysql



volumes:

  db_data:

Step 3: Configure Symfony Database Connection

Update the `.env` file in Symfony:

DATABASE_URL="mysql://symfony:symfony@symfony_db:3306/symfony?serverVersion=8.0&charset=utf8mb4"

Step 4: Build & Start Docker Containers

$ docker-compose up -d --build

Step 5: Verify Running Containers

$ docker ps

Step 6: Run Symfony Migrations

$ docker exec -it symfony_app php bin/console doctrine:migrations:migrate

Step 7: Access Symfony App

Your Symfony app should be running at: http://localhost:8080

Step 8: Stop & Remove Containers

$ docker-compose down

$ docker-compose down -v

